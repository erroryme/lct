import asyncio
import json
import os
import numpy as np
import torch
import joblib
from websockets import connect
from collections import deque

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
BASE = os.path.dirname(__file__)
FASTAPI_WS_URL = os.getenv("FASTAPI_WS_URL", "ws://host.docker.internal:8000")
WINDOW_SIZE = int(os.getenv("WINDOW_SIZE", "10"))

print(f"üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±—ç–∫–µ–Ω–¥—É: {FASTAPI_WS_URL}")
print(f"ü™ü –†–∞–∑–º–µ—Ä –æ–∫–Ω–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {WINDOW_SIZE}")

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ ---
from TEST_train_resnet_multihead import MultiHeadMLP, device

scaler = joblib.load(os.path.join(BASE, "scaler_unified.pkl"))
expected_dim = len(scaler.feature_names_in_)

if 2 * WINDOW_SIZE != expected_dim:
    raise ValueError(
        f"–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ: WINDOW_SIZE={WINDOW_SIZE} ‚Üí –æ–∂–∏–¥–∞–µ—Ç—Å—è {2*WINDOW_SIZE} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤, "
        f"–Ω–æ scaler –æ–±—É—á–µ–Ω –Ω–∞ {expected_dim}."
    )

model = MultiHeadMLP(in_dim=expected_dim).to(device)
model.load_state_dict(torch.load(os.path.join(BASE, "unified_mlp.pt"), map_location=device))
model.eval()

with open(os.path.join(BASE, "thresholds.json")) as f:
    thresholds = json.load(f)

print("‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞")

# --- –ë—É—Ñ–µ—Ä—ã ---
uc_values = deque(maxlen=WINDOW_SIZE)
bpm_values = deque(maxlen=WINDOW_SIZE)

# --- –°–ª—É—à–∞—Ç–µ–ª–∏ ---
async def listen_uc():
    async with connect(f"{FASTAPI_WS_URL}/ws/uc") as ws:
        print("üì° –°–ª—É—à–∞—é /ws/uc")
        while True:
            msg = await ws.recv()
            data = json.loads(msg)
            uc_values.append(float(data["value"]))

async def listen_bpm():
    async with connect(f"{FASTAPI_WS_URL}/ws/bpm") as ws:
        print("üì° –°–ª—É—à–∞—é /ws/bpm")
        while True:
            msg = await ws.recv()
            data = json.loads(msg)
            bpm_values.append(float(data["value"]))

# --- –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ /ws/ai ---
async def send_to_ai():
    async with connect(f"{FASTAPI_WS_URL}/ws/ai") as ws:
        print("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –≤ /ws/ai")
        last_len_uc = 0
        last_len_bpm = 0
        while True:
            if len(uc_values) == WINDOW_SIZE and len(bpm_values) == WINDOW_SIZE:
                if len(uc_values) == last_len_uc and len(bpm_values) == last_len_bpm:
                    await asyncio.sleep(0.1)
                    continue

                try:
                    # –í–ê–ñ–ù–û: –ø–æ—Ä—è–¥–æ–∫ –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –æ–±—É—á–µ–Ω–∏–µ–º!
                    x_raw = np.concatenate([np.array(uc_values), np.array(bpm_values)]).astype(np.float32)
                    x_scaled = scaler.transform(x_raw.reshape(1, -1))
                    xb = torch.tensor(x_scaled).to(device)

                    with torch.no_grad():
                        s_logit, long_out = model(xb)
                        s_prob = torch.sigmoid(s_logit).cpu().item()
                        long_probs = torch.sigmoid(long_out).cpu().numpy().ravel()

                    status = "–ù–æ—Ä–º–∞"
                    if s_prob > thresholds["t_high"]:
                        status = "–ü–∞—Ç–æ–ª–æ–≥–∏—è"
                    elif s_prob > thresholds["t_mid"]:
                        status = "–ü–æ–¥–æ–∑—Ä–µ–Ω–∏–µ"

                    rec = "–í –Ω–æ—Ä–º–µ."
                    if status == "–ü–∞—Ç–æ–ª–æ–≥–∏—è":
                        if long_probs[0] > 0.6:
                            rec = "–ü–æ–≤—ã—à–µ–Ω —Ä–∏—Å–∫ –≥–∏–ø–æ–∫—Å–∏–∏ –≤ –±–ª–∏–∂–∞–π—à–∏–µ 30 –º–∏–Ω—É—Ç."
                        if long_probs[1] > 0.6:
                            rec = "–†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ."

                    result = {
                        "time": len(uc_values),  # –∏–ª–∏ timestamp, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                        "short_term": {"status": status, "prob": round(s_prob, 4)},
                        "long_term": {
                            "hypoxia_30": round(float(long_probs[0]), 4),
                            "emergency_30": round(float(long_probs[1]), 4)
                        },
                        "recommendation": rec
                    }

                    await ws.send(json.dumps(result, ensure_ascii=False))
                    print("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:", result)

                    last_len_uc = len(uc_values)
                    last_len_bpm = len(bpm_values)

                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

            await asyncio.sleep(0.1)

# --- –ó–∞–ø—É—Å–∫ ---
async def main():
    await asyncio.gather(listen_uc(), listen_bpm(), send_to_ai())

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")